# roles/elasticsearch/tasks/main.yml
---
- name: "Include {{ ansible_distribution }} variables"
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags: install

- name: "Include {{ ansible_distribution }} tasks"
  include_tasks: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags: install

- name: Test directories presence
  stat:
    path: "{{ item }}"
  register: _dir
  with_items:
    - "/etc/gridinit.d/{{ openio_elasticsearch_namespace }}"
    - "{{ openio_elasticsearch_sysconfig_dir }}/elasticsearch-{{ openio_elasticsearch_serviceid }}"
    - "{{ openio_elasticsearch_volume }}"
    - "{{ openio_elasticsearch_pid_directory }}"

- name: Ensure directories exists
  file:
    path: "{{ item.item }}"
    state: directory
    owner: openio
    group: openio
    mode: 0755
    recurse: true
  with_items: "{{ _dir.results }}"
  when: not item.stat.exists
  tags: install

- name: Test log directory
  stat:
    path: "{{ openio_elasticsearch_log_dir }}"
  register: _log_dir

- name: Ensure log directory
  file:
    path: "{{ openio_elasticsearch_log_dir }}"
    state: directory
    owner: "{{ syslog_user }}"
    group: openio
    mode: 0750
    recurse: true
  when: not _log_dir.stat.exists
  tags: install

- name: Ensure elasticsearch pid directory is persistant
  lineinfile:
    dest: /etc/tmpfiles.d/elasticsearch.conf
    create: true
    line: "d {{ openio_elasticsearch_pid_directory }} 755 openio openio -"
    owner: openio
    group: openio
    mode: 0644
  tags: install
  when: openio_elasticsearch_pid_directory.split(' ')[0] | dirname is match("/run/.*")

- name: Generate configuration files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: openio
    group: openio
    mode: 0644
  with_items:
    - src: "log4j2.properties.j2"
      dest: "{{ openio_elasticsearch_sysconfig_dir }}/\
        {{ openio_elasticsearch_servicename }}/log4j2.properties"
    - src: "elasticsearch.yml.j2"
      dest: "{{ openio_elasticsearch_sysconfig_dir }}/\
        {{ openio_elasticsearch_servicename }}/elasticsearch.yml"
    - src: "gridinit_elasticsearch.conf.j2"
      dest: "{{ openio_elasticsearch_gridinit_dir }}/{{ openio_elasticsearch_gridinit_file_prefix }}\
        {{ openio_elasticsearch_servicename }}.conf"
  register: _elasticsearch_conf

- name: Ensure sysctl.conf settigns
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ openio_elasticsearch_sysctl }}"
  when: ansible_virtualization_type != "docker"

- name: Restart Elasticsearch
  shell: |
    gridinit_cmd reload
    gridinit_cmd restart {{ openio_elasticsearch_namespace }}-elasticsearch-{{ openio_elasticsearch_serviceid }}
  when:
    - _elasticsearch_conf.changed
    - not openio_elasticsearch_provision_only
  tags: configure

- name: Wait for Elasticsearch to be available
  wait_for:
    host: "{{ openio_elasticsearch_bind_address }}"
    port: "{{ openio_elasticsearch_http_port }}"
    delay: 10

- name: Check filebeat index
  uri:
    url: "http://{{ openio_elasticsearch_bind_address }}:{{ openio_elasticsearch_http_port }}/oio-filebeat"
    method: GET
    status_code:
      - 200
      - 404
  register: fb_index

- name: Provision filebeat lifecycle
  uri:
    url: "http://{{ openio_elasticsearch_bind_address }}:{{ openio_elasticsearch_http_port }}/_ilm/policy/filebeat"
    method: PUT
    body: "{{ openio_elasticseach_filebeat_lifecycle | to_json }}"
    status_code: 200
    body_format: json
  when: fb_index.status == 404

- name: Provision filebeat index
  uri:
    url: "http://{{ openio_elasticsearch_bind_address }}:{{ openio_elasticsearch_http_port }}/oio-filebeat"
    method: PUT
    body: "{{ lookup('file','filebeat_index.json') }}"
    status_code: 200
    body_format: json
  when: fb_index.status == 404

- name: Provision filebeat ingest pipeline
  uri:
    url: "http://{{ openio_elasticsearch_bind_address }}:{{ openio_elasticsearch_http_port }}/_ingest/pipeline/filebeat"
    method: PUT
    body: "{{ lookup('file','filebeat_pipeline.json') }}"
    status_code: 200
    body_format: json
...
